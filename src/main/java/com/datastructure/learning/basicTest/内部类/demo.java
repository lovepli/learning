package com.datastructure.learning.basicTest.内部类;

/**
 * @author: lipan
 * @date: 2020-04-25
 * @description:
 */
public class demo {

    /**
     *
     * 在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。
     * 广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。
     */


    /**
     * 内部类的使用场景和好处
     *
     * 为什么在Java中需要内部类？总结一下主要有以下四点：
     *
     * 　　1.每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，
     *
     * 　　2.方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。
     *
     * 　　3.方便编写事件驱动程序
     *
     * 　　4.方便编写线程代码
     *
     * 　　个人觉得第一点是最重要的原因之一，内部类的存在使得Java的多继承机制变得更加完善。
     *
     */

    /**
     * 在说静态内部类的使用场景之前，我们先来看一下静态内部类和非静态内部类的区别：
     *
     * 　　非静态内部类对象持有外部类对象的引用（编译器会隐式地将外部类对象的引用作为内部类的构造器参数）；而静态内部类对象不会持有外部类对象的引用
     *
     * 　　由于非静态内部类的实例创建需要有外部类对象的引用，所以非静态内部类对象的创建必须依托于外部类的实例；而静态内部类的实例创建只需依托外部类；
     *
     * 　　并且由于非静态内部类对象持有了外部类对象的引用，因此非静态内部类可以访问外部类的非静态成员；而静态内部类只能访问外部类的静态成员；
     */

    //参考：https://www.cnblogs.com/dolphin0520/p/10651845.html

    /**
     * 两者的根本性区别其实也决定了用static去修饰内部类的真正意图：
     *
     * 内部类需要脱离外部类对象来创建实例
     *
     * 避免内部类使用过程中出现内存溢出
     *
     * 　　第一种是目前静态内部类使用比较多的场景，比如JDK集合中的Entry、builder设计模式。
     */
}
